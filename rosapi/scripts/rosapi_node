#!/usr/bin/env python3
# Software License Agreement (BSD License)
#
# Copyright (c) 2012, Willow Garage, Inc.
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
#
#  * Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#  * Redistributions in binary form must reproduce the above
#    copyright notice, this list of conditions and the following
#    disclaimer in the documentation and/or other materials provided
#    with the distribution.
#  * Neither the name of Willow Garage, Inc. nor the names of its
#    contributors may be used to endorse or promote products derived
#    from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
# FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
# COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
# INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
# BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
# LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
# ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.

import sys

import rclpy
from rclpy.node import Node

from rosapi import glob_helper, proxy, objectutils, params
from rosapi.srv import *
from rosapi.msg import *


class Rosapi(Node):

    def __init__(self):
        super().__init__('rosapi')
        self.globs = self.get_globs()   # type: dict
        self.register_services()

    # Initialises the ROS node
    def register_services(self):
        proxy.init(self)
        self.create_service(Topics, '/rosapi/topics', self.get_topics)
        self.create_service(TopicsForType, '/rosapi/topics_for_type', self.get_topics_for_type)
        self.create_service(Services, '/rosapi/services', self.get_services)
        self.create_service(ServicesForType, '/rosapi/services_for_type', self.get_services_for_type)
        self.create_service(Nodes, '/rosapi/nodes', self.get_nodes)
        self.create_service(NodeDetails, '/rosapi/node_details', self.get_node_details)

        # Topics to be implemented:
        # rospy.Service('/rosapi/action_servers', GetActionServers, get_action_servers)
        # rospy.Service('/rosapi/topic_type', TopicType, get_topic_type)
        # rospy.Service('/rosapi/service_type', ServiceType, get_service_type)
        # rospy.Service('/rosapi/publishers', Publishers, get_publishers)
        # rospy.Service('/rosapi/subscribers', Subscribers, get_subscribers)
        # rospy.Service('/rosapi/service_providers', ServiceProviders, get_service_providers)
        # rospy.Service('/rosapi/service_node', ServiceNode, get_service_node)
        # rospy.Service('/rosapi/service_host', ServiceHost, get_service_host)
        # rospy.Service('/rosapi/message_details', MessageDetails, get_message_details)
        # rospy.Service('/rosapi/service_request_details', ServiceRequestDetails, get_service_request_details)
        # rospy.Service('/rosapi/service_response_details', ServiceResponseDetails, get_service_response_details)
        # rospy.Service('/rosapi/set_param', SetParam, set_param)
        # rospy.Service('/rosapi/get_param', GetParam, get_param)
        # rospy.Service('/rosapi/has_param', HasParam, has_param)
        # rospy.Service('/rosapi/search_param', SearchParam, search_param)
        # rospy.Service('/rosapi/delete_param', DeleteParam, delete_param)
        # rospy.Service('/rosapi/get_param_names', GetParamNames, get_param_names)
        # rospy.Service('/rosapi/get_time', GetTime, get_time)

    def get_globs(self):
        return glob_helper.get_globs()


    def get_topics(self, request, response):
        """ Called by the rosapi/Topics service. Returns a list of all the topics being published. """
        response.topics, response.types = proxy.get_topics_and_types(self.globs.get('topics_glob'))
        return response


    def get_topics_for_type(self, request, response):
        """ Called by the rosapi/TopicsForType service. Returns a list of all the topics that are publishing a given type """
        response.topics = proxy.get_topics_for_type(request.type, self.globs.get('topics_glob'))
        return response

    def get_services(self, request, response):
        """ Called by the rosapi/Services service. Returns a list of all the services being advertised. """
        response.services = proxy.get_services(self.globs.get('services_glob'))
        return response

    def get_services_for_type(self, request, response):
        """ Called by the rosapi/ServicesForType service. Returns a list of all the services that are publishing a given type """
        response.services = proxy.get_services_for_type(request.type, self.globs.get('services_glob'))
        return response

    def get_nodes(self, request, response):
        """ Called by the rosapi/Nodes service. Returns a list of all the nodes that are registered """
        response.nodes = proxy.get_nodes()
        return response

    def get_node_details(self, request, response):
        """ Called by the rosapi/Nodes service. Returns a node description """
        response.subscribing, response.publishing, response.services = proxy.get_node_info(request.node)
        return response


# TODO(@jubeira): make all of these methods of the node and port them.
    
def get_action_servers(request):
    """ Called by the rosapi/GetActionServers service. Returns a list of action servers based on actions standard topics """
    topics = proxy.get_topics(rosapi.glob_helper.topics_glob)
    action_servers = proxy.filter_action_servers(topics)
    return GetActionServersResponse(action_servers)
def get_topic_type(request):
    """ Called by the rosapi/TopicType service.  Given the name of a topic, returns the name of the type of that topic.
    Request class has one field, 'topic', which is a string value (the name of the topic)
    Response class has one field, 'type', which is a string value (the type of the topic)
    If the topic does not exist, an empty string is returned. """
    return TopicTypeResponse(proxy.get_topic_type(request.topic, rosapi.glob_helper.topics_glob))
    
def get_service_type(request):
    """ Called by the rosapi/ServiceType service.  Given the name of a service, returns the type of that service
    Request class has one field, 'service', which is a string value (the name of the service)
    Response class has one field, 'type', which is a string value (the type of the service)
    If the service does not exist, an empty string is returned. """
    return ServiceTypeResponse(proxy.get_service_type(request.service, rosapi.glob_helper.services_glob))

def get_publishers(request):
    """ Called by the rosapi/Publishers service.  Given the name of a topic, returns a list of node names
    that are publishing on that topic. """
    return PublishersResponse(proxy.get_publishers(request.topic, rosapi.glob_helper.topics_glob))

def get_subscribers(request):
    """ Called by the rosapi/Subscribers service.  Given the name of a topic, returns a list of node names
    that are subscribing to that topic. """
    return SubscribersResponse(proxy.get_subscribers(request.topic, rosapi.glob_helper.topics_glob))

def get_service_providers(request):
    """ Called by the rosapi/ServiceProviders service.  Given the name of a topic, returns a list of node names
    that are advertising that service type """
    return ServiceProvidersResponse(proxy.get_service_providers(request.service, rosapi.glob_helper.services_glob))

def get_service_node(request):
    """ Called by the rosapi/ServiceNode service.  Given the name of a service, returns the name of the node
    that is providing that service. """
    return ServiceNodeResponse(proxy.get_service_node(request.service))

def get_service_host(request):
    """ Called by the rosapi/ServiceNode service.  Given the name of a service, returns the name of the machine
    that is hosting that service. """
    return ServiceHostResponse(proxy.get_service_host(request.service))

def get_message_details(request):
    """ Called by the rosapi/MessageDetails service.  Given the name of a message type, returns the TypeDef
    for that type."""
    typedefs = [dict_to_typedef(d) for d in objectutils.get_typedef_recursive(request.type)]
    return MessageDetailsResponse(typedefs)

def get_service_request_details(request):
    """ Called by the rosapi/ServiceRequestDetails service. Given the name of a service type, returns the TypeDef
    for the request message of that service type. """
    return ServiceRequestDetailsResponse([dict_to_typedef(d) for d in objectutils.get_service_request_typedef_recursive(request.type)])

def get_service_response_details(request):
    """ Called by the rosapi/ServiceResponseDetails service. Given the name of a service type, returns the TypeDef
    for the response message of that service type. """
    return ServiceResponseDetailsResponse([dict_to_typedef(d) for d in objectutils.get_service_response_typedef_recursive(request.type)])

def set_param(request):
    rosapi.params.set_param(request.name, request.value, rosapi.glob_helper.params_glob)
    return SetParamResponse()

def get_param(request):
    return GetParamResponse(rosapi.params.get_param(request.name, request.default, rosapi.glob_helper.params_glob))

def has_param(request):
    return HasParamResponse(rosapi.params.has_param(request.name, rosapi.glob_helper.params_glob))

def search_param(request):
    return SearchParamResponse(rosapi.params.search_param(request.name, rosapi.glob_helper.params_glob))

def delete_param(request):
    rosapi.params.delete_param(request.name, rosapi.glob_helper.params_glob)
    return DeleteParamResponse()

def get_param_names(request):
    return GetParamNamesResponse(rosapi.params.get_param_names(rosapi.glob_helper.params_glob))

def get_time(request):
    return GetTimeResponse(rospy.get_rostime())

def dict_to_typedef(typedefdict):
    typedef = TypeDef()
    typedef.type = typedefdict["type"]
    typedef.fieldnames = typedefdict["fieldnames"]
    typedef.fieldtypes = typedefdict["fieldtypes"]
    typedef.fieldarraylen = typedefdict["fieldarraylen"]
    typedef.examples = typedefdict["examples"]
    return typedef


def main(args=None):
    if args is None:
        args = sys.argv
    
    rclpy.init(args=args)
    rosapi_node = Rosapi()
    rclpy.spin(rosapi_node)

    node.destroy_node()
    rclpy.shutdown()

if __name__ == '__main__':
    main()
